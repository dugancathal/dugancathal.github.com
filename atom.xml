<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Carp A Diem]]></title>
  <link href="http://carps.dugancathal.com/atom.xml" rel="self"/>
  <link href="http://carps.dugancathal.com/"/>
  <updated>2013-07-25T21:16:10-06:00</updated>
  <id>http://carps.dugancathal.com/</id>
  <author>
    <name><![CDATA[TJ Taylor]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ginger Slap Cookies]]></title>
    <link href="http://carps.dugancathal.com/blog/2013/07/24/ginger-slap-cookies/"/>
    <updated>2013-07-24T10:34:00-06:00</updated>
    <id>http://carps.dugancathal.com/blog/2013/07/24/ginger-slap-cookies</id>
    <content type="html"><![CDATA[<p>These cookies are originally from a recipe book I found in a thrift store.
They&rsquo;ve since become a staple at any party we have or attend. I have, however,
made one modification. The cayenne that is called for was actually supposed to
be jalapeño powder, but as I could never find that at any store I normally go
to, I made the swap and haven&rsquo;t looked back.</p>

<p>Enjoy these with a nice cup of Mexican Hot Chocolate for a really nice
compliment.</p>

<!-- more -->


<h2>Ingredients:</h2>

<ul>
<li><p>1 Egg</p></li>
<li><p>1 stick of butter</p></li>
<li><p>1 cup white sugar</p></li>
<li><p>&frac12; tsp vanilla</p></li>
<li><p>2 tsp milk</p></li>
<li><p>2 tsp ground ginger</p></li>
<li><p>2 tsp cayenne pepper</p></li>
<li><p>2 tsp baking powder</p></li>
<li><p>1 &frac34; cups white flour</p></li>
</ul>


<h2>Instructions</h2>

<p>Combine the ingredients in the order listed. Then drop and bake on a cookie
sheet at 350ºF for about 9 minutes; you want them slightly chewy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awesome Cream Cheese Brownies]]></title>
    <link href="http://carps.dugancathal.com/blog/2013/07/05/awesome-cream-cheese-brownies/"/>
    <updated>2013-07-05T10:57:00-06:00</updated>
    <id>http://carps.dugancathal.com/blog/2013/07/05/awesome-cream-cheese-brownies</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s give the concept of &ldquo;special brownies&rdquo; a face-lift, shall we? These things were <em>to die for</em>.</p>

<!-- more -->


<h2>Ingredients:</h2>

<h3>Brownies:</h3>

<ul>
<li><p>4 eggs</p></li>
<li><p>2 cups white sugar</p></li>
<li><p>2 cups flour</p></li>
<li><p>Pinch of salt</p></li>
<li><p>1 tsp vanilla</p></li>
<li><p>1 Hershey&rsquo;s milk chocolate bar</p></li>
<li><p>1 Hershey&rsquo;s dark chocolate bar</p></li>
<li><p>&frac12; cup  cacao powder</p></li>
<li><p>&frac14; cup Bailey&rsquo;s Irish Cream (or other favorite brand)</p></li>
<li><p>1/8 cup Kahlua</p></li>
<li><p>&frac14; cup butter</p></li>
</ul>


<h3>Cream Cheese Marbling:</h3>

<ul>
<li><p>1 block of cream cheese</p></li>
<li><p>&frac12; cup sugar</p></li>
<li><p>1 tsp vanilla</p></li>
</ul>


<h2>Instructions</h2>

<p>Melt the butter in a small saucepan and, once melted, add the chocolate in small
amounts, followed by the liquor until a sauce forms &ndash; it should be pretty fluid.
Add the cacao powder and stir until thick and no clumps remain.</p>

<p>In a medium bowl, combine the eggs and sugar until light, add the vanilla and
salt followed by the chocolate sauce; mix well. Add the flour. Spoon and spread
the mixture into a greased brownie pan.</p>

<p>Mix all the ingredients for the marbling together and the drop clumps onto the
top of the brownie batter, spreading it throughout. I used the back end of a
knife, but pretty much any tool will work.</p>

<p>Bake at 350 degrees for approximately 30 minutes, or until the brownies are
mostly set. Do not, whatever you do, allow them to over-bake; these brownies are
best when served gooey.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 1 of Catan: Ruby Equality]]></title>
    <link href="http://carps.dugancathal.com/blog/2013/06/08/day-1-of-catan-ruby-equality/"/>
    <updated>2013-06-08T01:23:00-06:00</updated>
    <id>http://carps.dugancathal.com/blog/2013/06/08/day-1-of-catan-ruby-equality</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve started coding up a Ruby version of the awesome board game <em>the Settlers of Catan</em>. Ideally, it will be a Rails app that allows for multiplayer interaction and enjoyment of the game. Why, you ask? Because I can, and because Ruby doesn&rsquo;t have a Catan version yet!</p>

<p>There are a lot of interesting things that go in to programming a game, and I hope to bring a few of my lessons learned to this blog, starting with, today, a reminder on how Ruby checks equality.</p>

<!-- more -->


<h2>Comparable (&lt;=>), ===, ==, eql?, equals?, and #hash</h2>

<p>Ruby measures equality in, you guessed it, several ways, and all for separate reasons.</p>

<p>For the purpose of argument, say we have a class that represents a point in Hexagonal space. (Think of it as perverted 3D. Look at <a href="http://www.redblobgames.com/grids/hexagons/#neighbors">this awesome article</a> for some really good information on where I got this). And suppose, then, that we want to be able to lookup in a hash based on these points.</p>

<p>My first implementation was something like this:</p>

<div>
  <pre><code class='ruby'>class HexPoint
      attr_reader :x, :y

      def initialize(x, y)
        @x, @y = x, y
      end

      def z
        0 - x - y
      end
    end

    grid = {}
    grid[HexPoint.new(0, 0)] = Object.new
    grid[HexPoint.new(0, 0)] #=&gt; nil</code></pre>
</div>


<p>I quickly realized that this wasn&rsquo;t working. And so, remembering something about Comparable from way back, I thought, &ldquo;Hey, maybe?&rdquo;</p>

<p>After looking at the <a href="http://ruby-doc.org/core-2.0/Comparable.html">docs</a> though, it was quite clear that Comparable was not what I was looking for; hell, the first line says &ldquo;The Comparable mixin is used by classes whose objects may be ordered&rdquo;.</p>

<p>I moved onward to other things &hellip; and tried implementing #==.</p>

<div>
  <pre><code class='ruby'>class HexPoint
      attr_reader :x, :y

      def initialize(x, y)
        @x, @y = x, y
      end

      def z
        0 - x - y
      end

      def ==(other)
        x == other.x &amp;&amp; y == other.y
      end
    end

    grid = {}
    grid[HexPoint.new(0, 0)] = Object.new
    grid[HexPoint.new(0, 0)] #=&gt; nil</code></pre>
</div>


<p>Same bat-time, same bat-channel. No dice. Not one to lose heart, though, I remembered my old, forgotten friend equal? Unfortunately, got the same darned result for #equal?, #===, and #eql?.</p>

<p>Finally, I recalled that hashes make use of the often unheard-of method #hash (which is <a href="http://ruby-doc.org/core-2.0/Object.html#method-i-hash">defined on Object</a>), and generates a unique Fixnum for any object. This method can, as with all methods in Ruby, be overridden to generate a SPECIFIC unique Fixnum for your objects. A word of caution, though: according to the documentation, this number should not be the same across multiple invocations of Ruby (that is, if you kill the process and start it again, it should be different). This is in response to <a href="http://www.ruby-lang.org/en/news/2012/11/09/ruby19-hashdos-cve-2012-5371/">a Denial of Service vulnerability</a> found in Ruby 1.9.</p>

<p>Knowing that, then, I tried this:</p>

<div>
  <pre><code class='ruby'>class HexPoint
      attr_reader :x, :y

      def initialize(x, y)
        @x, @y = x, y
      end

      def z
        0 - x - y
      end

      def hash
        [x, y, z].hash
      end
    end

    grid = {}
    grid[HexPoint.new(0, 0)] = Object.new
    grid[HexPoint.new(0, 0)] #=&gt; nil</code></pre>
</div>


<p>This generates a nice, consistent hash value from the <em>array</em> of x, y, and z, thereby mitigating collision issues because the order matters. But still, this isn&rsquo;t quite right. Hashes, believe it or not, use a combination of #eql? <em>and</em> #hash to work on their keys.</p>

<p>Seventh times a charm, I threw an #eql? implementation in, and went with this:</p>

<div>
  <pre><code class='ruby'>class HexPoint
      attr_reader :x, :y

      def initialize(x, y)
        @x, @y = x, y
      end

      def z
        0 - x - y
      end

      def eql?(other)
        x == other.x &amp;&amp; y == other.y
      end

      def hash 
        [x, y, z].hash
      end
    end

    grid = {}
    grid[HexPoint.new(0, 0)] = Object.new
    grid[HexPoint.new(0, 0)] #=&gt; nil</code></pre>
</div>


<p>And it finally worked! I might, at some point, end up having to implement #== and/or #===, but for now, the only comparison of points is being done in the background by the Hash(s), so I&rsquo;m not worried, and I&rsquo;ll continue coding on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Take on the Shadow Broker]]></title>
    <link href="http://carps.dugancathal.com/blog/2013/05/25/my-take-on-the-shadow-broker/"/>
    <updated>2013-05-25T22:02:00-06:00</updated>
    <id>http://carps.dugancathal.com/blog/2013/05/25/my-take-on-the-shadow-broker</id>
    <content type="html"><![CDATA[<p>Enjoy this while playing your favorite XBox game and kicking ass the Asari way.</p>

<!-- more -->


<p>Ingredients:</p>

<ul>
<li><p>1 shot Blue Curacao</p></li>
<li><p>2 shots Vodka (Pick your poison, but I stick with Grey Goose)</p></li>
<li><p>2 shots Hypnotiq</p></li>
<li><p>Lemon-Lime soda (I prefer Sprite)</p></li>
<li><p>Margarita mix</p></li>
<li><p>8-10 Blueberries</p></li>
<li><p>Ice (optional, your liquor should be cold already)</p></li>
</ul>


<p>Process:</p>

<ol>
<li><p>Place the blueberries in the glass.</p></li>
<li><p>Add vodka</p></li>
<li><p>Add Hypnotiq</p></li>
<li><p>Add Blue Curacao</p></li>
<li><p>Pour equal parts soda and Margarita mix to top</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started]]></title>
    <link href="http://carps.dugancathal.com/blog/2013/05/25/getting-started/"/>
    <updated>2013-05-25T11:08:00-06:00</updated>
    <id>http://carps.dugancathal.com/blog/2013/05/25/getting-started</id>
    <content type="html"><![CDATA[<p>Welcome to my (generated) blog. I will be updating this in the near future, but for now, I&rsquo;m just getting used to Octopress.</p>

<p>Don&rsquo;t judge the (tacky) standard page layout as that will be changing, too.</p>

<p>Please keep checking back for the day when I actually post something worthwhile on a variety of topics.</p>

<p>TJ</p>
]]></content>
  </entry>
  
</feed>
