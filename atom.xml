<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Carp A Diem]]></title>
  <link href="http://carps.dugancathal.com/atom.xml" rel="self"/>
  <link href="http://carps.dugancathal.com/"/>
  <updated>2013-10-12T21:55:11-06:00</updated>
  <id>http://carps.dugancathal.com/</id>
  <author>
    <name><![CDATA[TJ Taylor]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Just Enough tmux to be Dangerous]]></title>
    <link href="http://carps.dugancathal.com/blog/2013/08/07/just-enough-tmux-to-be-dangerous/"/>
    <updated>2013-08-07T12:32:00-06:00</updated>
    <id>http://carps.dugancathal.com/blog/2013/08/07/just-enough-tmux-to-be-dangerous</id>
    <content type="html"><![CDATA[<p>The other day, a friend of mine expressed interest in learning about tmux but
was stumped by the lack of good resources for ramping up. Here, I aim to put
down a few key points that let you get going.</p>

<!-- more -->


<h2>Background</h2>

<p>First, a little bit of information. tmux is a &ldquo;Terminal Mulitplexer&rdquo;, meaning
that it can run multiple terminals within another (e.g. TERM-CEPTION!). This can
be extremely useful because it allows you to keep all of the things you need on
one screen in &ldquo;panes&rdquo; or multiple tab-like screens called &ldquo;windows&rdquo;.</p>

<p>But most terminals now-a-days can do that. Some of the real power of tmux
becomes evident when you look at its concept of sessions. As tmux is a
server-client based architecture, whenever you fire up a tmux session, you&rsquo;re
actually first checking if there is a tmux server, creating one if there isn&rsquo;t,
and then attaching to the most previous session (and creating one of those if
there isn&rsquo;t one).</p>

<p>This feature lets you keep several projects &ldquo;live&rdquo; at one time. Say, for
instance, that you&rsquo;re building a JS-heavy front-end app that&rsquo;s hooking into a
Rails API that you&rsquo;re building. You could have a session for the Rails app that
has your server, a console, your tests, and an editor open at the same time as
a session for your JS app. Then, because tmux has a server, even if you close
your terminal application (be it iTerm or Terminal) you can just re-attach to
those sessions after opening up another terminal app.</p>

<p>Additionally, this concept of long-lived terminal sessions provides a powerful,
low-latency tool for remote pair-programming. The host can start a session and
provide access to the remote client via SSH, et voilá, you&rsquo;re sharing a screen!</p>

<h2>Installation</h2>

<p>If you&rsquo;re running Mac OS, it&rsquo;s pretty easy to use Homebrew to get tmux on your
machine.</p>

<pre><code>$ brew install tmux
</code></pre>

<p>Otherwise, you can follow the typical pattern of downloading and building the
source code yourself from <a href="tmux.sourceforge.net">the website</a>. The instructions
for that are well defined in <a href="http://sourceforge.net/p/tmux/tmux-code/ci/master/tree/README">their
README</a>.</p>

<h2>Ramping up</h2>

<p>The easiest way to get started with tmux is to just start a new session.</p>

<pre><code>$ tmux
</code></pre>

<p>It should look pretty much like your normal shell, but you now have a bar across
the bottom of the terminal with some additional data on it. You are now in a
tmux &ldquo;window&rdquo;. For now, just think of this as the analog to a normal terminal&rsquo;s
tabs.</p>

<p>Tmux has the concept of a &ldquo;prefix sequence&rdquo; which defaults to CTRL+b. This is
similar to vim&rsquo;s leader key; it signals to tmux that you&rsquo;re about to do
something relating to your shell.</p>

<p>By pressing <code>&lt;prefix&gt;-c</code> (that is CTRL+b, followed by a lowercase c), you
should create a new tmux window, and at the bottom of your screen, there should
now be something resembling &ldquo;1:~*&rdquo;. That&rsquo;s tmux&rsquo;s way of saying that you&rsquo;re on
window 1 in your current directory with nothing running (the asterisk (*) means
current window). You can navigate back to window 0 using <code>&lt;prefix&gt;-0</code> (and,
similarly to window N with <code>&lt;prefix&gt;-N</code>). To &ldquo;kill&rdquo; a window, you can use
<code>&lt;prefix&gt;-&amp;</code>. This will ask you if you really wish to kill it, and then close
the window and any running processes it contains.</p>

<h2>The tmux config file (.tmux.conf)</h2>

<p>You can customize tmux with a custom prefix and bindings in your home
directory&rsquo;s <code>.tmux.conf</code> file. To do that, you just need to &ldquo;unbind&rdquo; the prefix
from <code>&lt;prefix&gt;-b</code> and then bind it to the key combination of your choice.</p>

<pre><code>unbind &lt;C-b&gt;
bind-key &lt;C-x&gt; # Or the character of your choosing
</code></pre>

<p>There&rsquo;s a lot more you can do in here, but that&rsquo;s another topic altogether.</p>

<h2>Splits, VSplits, and Panes</h2>

<p>Now for the thing that everyone thinks of when they see tmux: panes. Panes are
contained by windows and allow you split windows vertically and horizontally.
The keyboard shortcuts for these are:</p>

<pre><code>&lt;prefix&gt;-% # Vertical split
&lt;prefix&gt;-" # Horizontal split
</code></pre>

<p>Once you have your window split into panes, you can navigate between panes using
the prefix and arrow keys.</p>

<pre><code>&lt;prefix&gt;-UP # Move to the pane above your current
&lt;prefix&gt;-RIGHT # Move to the pane to the right of your current
&lt;prefix&gt;-LEFT # Move to the pane to the left of your current
&lt;prefix&gt;-DOWN # Move to the pane below your current
</code></pre>

<p>As a vim user, I have these all bound to the vim keys for moving around. In my
<code>.tmux.conf</code>:</p>

<pre><code>bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R
</code></pre>

<p>You can &ldquo;kill&rdquo; a pane with <code>&lt;prefix&gt;-x</code>; keep in mind that, similar to killing a
window, this actually closes the shell that&rsquo;s running in that pane, so if you have
a process running, it will die unless it can handle detachment from a terminal.</p>

<h2>Sessions and Session Management</h2>

<p>Remember me saying that sessions are one of the coolest parts of tmux? Let&rsquo;s dig
into that, shall we?</p>

<p>From a command prompt (within tmux or not, it doesn&rsquo;t matter), type:</p>

<pre><code>$ tmux list-sessions
</code></pre>

<p>You should now have a screen that says something like</p>

<pre><code>0: 2 windows (created Thu Oct 10 09:11:09 2013) [204x53] (attached)
</code></pre>

<p>That means the session named 0 has 2 windows open and that someone is currently
attached to it (as well as the other obvious metadata).</p>

<p>You can rename the session to something more meaningful using the command
<code>&lt;prefix&gt;-$</code>. That will open up a prompt at the bottom of the screen asking what
you want to name the current-session.</p>

<p>To open up a new session, I added a binding to my <code>.tmux.conf</code>:</p>

<pre><code>bind-key N command-prompt -I '#S' "new-session '%%'"
</code></pre>

<p>That lets me open up a new session and specify a name at the command line. Now,
to switch back to where we were (as starting a new session switches over
immediately), we can add this binding:</p>

<pre><code>bind-key C-s command-prompt -I #S "attach-session -t '%%'"
</code></pre>

<p>which, like the preceding binding, asks for the name of the session you want to
switch to. Interestingly, you can do a partial name and, provided that no other
session matches that partial, tmux is smart enough to switch. For example, I
might have two sessions open, &ldquo;carps&rdquo; and &ldquo;triplr&rdquo;. I can switch to &ldquo;carps&rdquo; just
by typing &ldquo;c&rdquo; at the switch-session command prompt.</p>

<h2>Sign Off</h2>

<p>That was a lot of information and I&rsquo;ve just barely scratched the surface. I plan
to write a few more of these and get even more detail out in a non-manpage sort
of way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ginger Slap Cookies]]></title>
    <link href="http://carps.dugancathal.com/blog/2013/07/24/ginger-slap-cookies/"/>
    <updated>2013-07-24T10:34:00-06:00</updated>
    <id>http://carps.dugancathal.com/blog/2013/07/24/ginger-slap-cookies</id>
    <content type="html"><![CDATA[<p>These cookies are originally from a recipe book I found in a thrift store.
They&rsquo;ve since become a staple at any party we have or attend. I have, however,
made one modification. The cayenne that is called for was actually supposed to
be jalapeño powder, but as I could never find that at any store I normally go
to, I made the swap and haven&rsquo;t looked back.</p>

<p>Enjoy these with a nice cup of Mexican Hot Chocolate for a really nice
compliment.</p>

<!-- more -->


<h2>Ingredients:</h2>

<ul>
<li><p>1 Egg</p></li>
<li><p>1 stick of butter</p></li>
<li><p>1 cup white sugar</p></li>
<li><p>&frac12; tsp vanilla</p></li>
<li><p>2 tsp milk</p></li>
<li><p>2 tsp ground ginger</p></li>
<li><p>2 tsp cayenne pepper</p></li>
<li><p>2 tsp baking powder</p></li>
<li><p>1 &frac34; cups white flour</p></li>
</ul>


<h2>Instructions</h2>

<p>Combine the ingredients in the order listed. Then drop and bake on a cookie
sheet at 350ºF for about 9 minutes; you want them slightly chewy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awesome Cream Cheese Brownies]]></title>
    <link href="http://carps.dugancathal.com/blog/2013/07/05/awesome-cream-cheese-brownies/"/>
    <updated>2013-07-05T10:57:00-06:00</updated>
    <id>http://carps.dugancathal.com/blog/2013/07/05/awesome-cream-cheese-brownies</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s give the concept of &ldquo;special brownies&rdquo; a face-lift, shall we? These things were <em>to die for</em>.</p>

<!-- more -->


<h2>Ingredients:</h2>

<h3>Brownies:</h3>

<ul>
<li><p>4 eggs</p></li>
<li><p>2 cups white sugar</p></li>
<li><p>2 cups flour</p></li>
<li><p>Pinch of salt</p></li>
<li><p>1 tsp vanilla</p></li>
<li><p>1 Hershey&rsquo;s milk chocolate bar</p></li>
<li><p>1 Hershey&rsquo;s dark chocolate bar</p></li>
<li><p>&frac12; cup  cacao powder</p></li>
<li><p>&frac14; cup Bailey&rsquo;s Irish Cream (or other favorite brand)</p></li>
<li><p>1/8 cup Kahlua</p></li>
<li><p>&frac14; cup butter</p></li>
</ul>


<h3>Cream Cheese Marbling:</h3>

<ul>
<li><p>1 block of cream cheese</p></li>
<li><p>&frac12; cup sugar</p></li>
<li><p>1 tsp vanilla</p></li>
</ul>


<h2>Instructions</h2>

<p>Melt the butter in a small saucepan and, once melted, add the chocolate in small
amounts, followed by the liquor until a sauce forms &ndash; it should be pretty fluid.
Add the cacao powder and stir until thick and no clumps remain.</p>

<p>In a medium bowl, combine the eggs and sugar until light, add the vanilla and
salt followed by the chocolate sauce; mix well. Add the flour. Spoon and spread
the mixture into a greased brownie pan.</p>

<p>Mix all the ingredients for the marbling together and the drop clumps onto the
top of the brownie batter, spreading it throughout. I used the back end of a
knife, but pretty much any tool will work.</p>

<p>Bake at 350 degrees for approximately 30 minutes, or until the brownies are
mostly set. Do not, whatever you do, allow them to over-bake; these brownies are
best when served gooey.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 1 of Catan: Ruby Equality]]></title>
    <link href="http://carps.dugancathal.com/blog/2013/06/08/day-1-of-catan-ruby-equality/"/>
    <updated>2013-06-08T01:23:00-06:00</updated>
    <id>http://carps.dugancathal.com/blog/2013/06/08/day-1-of-catan-ruby-equality</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve started coding up a Ruby version of the awesome board game <em>the Settlers of Catan</em>. Ideally, it will be a Rails app that allows for multiplayer interaction and enjoyment of the game. Why, you ask? Because I can, and because Ruby doesn&rsquo;t have a Catan version yet!</p>

<p>There are a lot of interesting things that go in to programming a game, and I hope to bring a few of my lessons learned to this blog, starting with, today, a reminder on how Ruby checks equality.</p>

<!-- more -->


<h2>Comparable (&lt;=>), ===, ==, eql?, equals?, and #hash</h2>

<p>Ruby measures equality in, you guessed it, several ways, and all for separate reasons.</p>

<p>For the purpose of argument, say we have a class that represents a point in Hexagonal space. (Think of it as perverted 3D. Look at <a href="http://www.redblobgames.com/grids/hexagons/#neighbors">this awesome article</a> for some really good information on where I got this). And suppose, then, that we want to be able to lookup in a hash based on these points.</p>

<p>My first implementation was something like this:</p>

<div>
  <pre><code class='ruby'>class HexPoint
      attr_reader :x, :y

      def initialize(x, y)
        @x, @y = x, y
      end

      def z
        0 - x - y
      end
    end

    grid = {}
    grid[HexPoint.new(0, 0)] = Object.new
    grid[HexPoint.new(0, 0)] #=&gt; nil</code></pre>
</div>


<p>I quickly realized that this wasn&rsquo;t working. And so, remembering something about Comparable from way back, I thought, &ldquo;Hey, maybe?&rdquo;</p>

<p>After looking at the <a href="http://ruby-doc.org/core-2.0/Comparable.html">docs</a> though, it was quite clear that Comparable was not what I was looking for; hell, the first line says &ldquo;The Comparable mixin is used by classes whose objects may be ordered&rdquo;.</p>

<p>I moved onward to other things &hellip; and tried implementing #==.</p>

<div>
  <pre><code class='ruby'>class HexPoint
      attr_reader :x, :y

      def initialize(x, y)
        @x, @y = x, y
      end

      def z
        0 - x - y
      end

      def ==(other)
        x == other.x &amp;&amp; y == other.y
      end
    end

    grid = {}
    grid[HexPoint.new(0, 0)] = Object.new
    grid[HexPoint.new(0, 0)] #=&gt; nil</code></pre>
</div>


<p>Same bat-time, same bat-channel. No dice. Not one to lose heart, though, I remembered my old, forgotten friend equal? Unfortunately, got the same darned result for #equal?, #===, and #eql?.</p>

<p>Finally, I recalled that hashes make use of the often unheard-of method #hash (which is <a href="http://ruby-doc.org/core-2.0/Object.html#method-i-hash">defined on Object</a>), and generates a unique Fixnum for any object. This method can, as with all methods in Ruby, be overridden to generate a SPECIFIC unique Fixnum for your objects. A word of caution, though: according to the documentation, this number should not be the same across multiple invocations of Ruby (that is, if you kill the process and start it again, it should be different). This is in response to <a href="http://www.ruby-lang.org/en/news/2012/11/09/ruby19-hashdos-cve-2012-5371/">a Denial of Service vulnerability</a> found in Ruby 1.9.</p>

<p>Knowing that, then, I tried this:</p>

<div>
  <pre><code class='ruby'>class HexPoint
      attr_reader :x, :y

      def initialize(x, y)
        @x, @y = x, y
      end

      def z
        0 - x - y
      end

      def hash
        [x, y, z].hash
      end
    end

    grid = {}
    grid[HexPoint.new(0, 0)] = Object.new
    grid[HexPoint.new(0, 0)] #=&gt; nil</code></pre>
</div>


<p>This generates a nice, consistent hash value from the <em>array</em> of x, y, and z, thereby mitigating collision issues because the order matters. But still, this isn&rsquo;t quite right. Hashes, believe it or not, use a combination of #eql? <em>and</em> #hash to work on their keys.</p>

<p>Seventh times a charm, I threw an #eql? implementation in, and went with this:</p>

<div>
  <pre><code class='ruby'>class HexPoint
      attr_reader :x, :y

      def initialize(x, y)
        @x, @y = x, y
      end

      def z
        0 - x - y
      end

      def eql?(other)
        x == other.x &amp;&amp; y == other.y
      end

      def hash 
        [x, y, z].hash
      end
    end

    grid = {}
    grid[HexPoint.new(0, 0)] = Object.new
    grid[HexPoint.new(0, 0)] #=&gt; nil</code></pre>
</div>


<p>And it finally worked! I might, at some point, end up having to implement #== and/or #===, but for now, the only comparison of points is being done in the background by the Hash(s), so I&rsquo;m not worried, and I&rsquo;ll continue coding on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Take on the Shadow Broker]]></title>
    <link href="http://carps.dugancathal.com/blog/2013/05/25/my-take-on-the-shadow-broker/"/>
    <updated>2013-05-25T22:02:00-06:00</updated>
    <id>http://carps.dugancathal.com/blog/2013/05/25/my-take-on-the-shadow-broker</id>
    <content type="html"><![CDATA[<p>Enjoy this while playing your favorite XBox game and kicking ass the Asari way.</p>

<!-- more -->


<p>Ingredients:</p>

<ul>
<li><p>1 shot Blue Curacao</p></li>
<li><p>2 shots Vodka (Pick your poison, but I stick with Grey Goose)</p></li>
<li><p>2 shots Hypnotiq</p></li>
<li><p>Lemon-Lime soda (I prefer Sprite)</p></li>
<li><p>Margarita mix</p></li>
<li><p>8-10 Blueberries</p></li>
<li><p>Ice (optional, your liquor should be cold already)</p></li>
</ul>


<p>Process:</p>

<ol>
<li><p>Place the blueberries in the glass.</p></li>
<li><p>Add vodka</p></li>
<li><p>Add Hypnotiq</p></li>
<li><p>Add Blue Curacao</p></li>
<li><p>Pour equal parts soda and Margarita mix to top</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started]]></title>
    <link href="http://carps.dugancathal.com/blog/2013/05/25/getting-started/"/>
    <updated>2013-05-25T11:08:00-06:00</updated>
    <id>http://carps.dugancathal.com/blog/2013/05/25/getting-started</id>
    <content type="html"><![CDATA[<p>Welcome to my (generated) blog. I will be updating this in the near future, but for now, I&rsquo;m just getting used to Octopress.</p>

<p>Don&rsquo;t judge the (tacky) standard page layout as that will be changing, too.</p>

<p>Please keep checking back for the day when I actually post something worthwhile on a variety of topics.</p>

<p>TJ</p>
]]></content>
  </entry>
  
</feed>
